{"ts":1366561330287,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/**\n * Ensure that a user is logged in before proceeding to next route middleware.\n *\n * This middleware ensures that a user is logged in.  If a request is received\n * that is unauthenticated, the request will be redirected to a login page (by\n * default to `/login`).\n *\n * Additionally, `returnTo` will be be set in the session to the URL of the\n * current request.  After authentication, this value can be used to redirect\n * the user to the page that was originally requested.\n *\n * Options:\n *   - `redirectTo`   URL to redirect to for login, defaults to _/login_\n *   - `setReturnTo`  set redirectTo in session, defaults to _true_\n *\n * Examples:\n *\n *     app.get('/profile',\n *       ensureLoggedIn(),\n *       function(req, res) { ... });\n *\n *     app.get('/profile',\n *       ensureLoggedIn('/signin'),\n *       function(req, res) { ... });\n *\n *     app.get('/profile',\n *       ensureLoggedIn({ redirectTo: '/session/new', setReturnTo: false }),\n *       function(req, res) { ... });\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\nmodule.exports = function ensureLoggedIn(options) {\n  if (typeof options == 'string') {\n    options = { redirectTo: options }\n  }\n  options = options || {};\n  \n  var url = options.redirectTo || '/login';\n  var setReturnTo = (options.setReturnTo === undefined) ? true : options.setReturnTo;\n  \n  return function(req, res, next) {\n    if (!req.isAuthenticated || !req.isAuthenticated()) {\n      if (setReturnTo && req.session) {\n        req.session.returnTo = req.url;\n      }\n      return res.redirect(url);\n    }\n    next();\n  }\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":1599}]],"length":1599}
